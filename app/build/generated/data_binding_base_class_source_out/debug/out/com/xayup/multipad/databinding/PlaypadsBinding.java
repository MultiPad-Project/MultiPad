// Generated by view binder compiler. Do not edit!
package com.xayup.multipad.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.VerticalSeekBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.xayup.multipad.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PlaypadsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final GridLayout contAllPads;

  @NonNull
  public final ImageView launchpadOverride;

  @NonNull
  public final EditText launchpadOverrideScale;

  @NonNull
  public final RelativeLayout layerCfgWindow;

  @NonNull
  public final LinearLayout layerDecorationScaleBackground;

  @NonNull
  public final TextView layerDecorationScaleTitle;

  @NonNull
  public final RelativeLayout layoutbackground;

  @NonNull
  public final ImageView playbgimg;

  @NonNull
  public final Button scaleAccept;

  @NonNull
  public final Button scaleHide;

  @NonNull
  public final VerticalSeekBar seekBarProgressAutoplay;

  @NonNull
  public final Button stopAutoplayRec;

  private PlaypadsBinding(@NonNull RelativeLayout rootView, @NonNull GridLayout contAllPads,
      @NonNull ImageView launchpadOverride, @NonNull EditText launchpadOverrideScale,
      @NonNull RelativeLayout layerCfgWindow, @NonNull LinearLayout layerDecorationScaleBackground,
      @NonNull TextView layerDecorationScaleTitle, @NonNull RelativeLayout layoutbackground,
      @NonNull ImageView playbgimg, @NonNull Button scaleAccept, @NonNull Button scaleHide,
      @NonNull VerticalSeekBar seekBarProgressAutoplay, @NonNull Button stopAutoplayRec) {
    this.rootView = rootView;
    this.contAllPads = contAllPads;
    this.launchpadOverride = launchpadOverride;
    this.launchpadOverrideScale = launchpadOverrideScale;
    this.layerCfgWindow = layerCfgWindow;
    this.layerDecorationScaleBackground = layerDecorationScaleBackground;
    this.layerDecorationScaleTitle = layerDecorationScaleTitle;
    this.layoutbackground = layoutbackground;
    this.playbgimg = playbgimg;
    this.scaleAccept = scaleAccept;
    this.scaleHide = scaleHide;
    this.seekBarProgressAutoplay = seekBarProgressAutoplay;
    this.stopAutoplayRec = stopAutoplayRec;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PlaypadsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PlaypadsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.playpads, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PlaypadsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.contAllPads;
      GridLayout contAllPads = ViewBindings.findChildViewById(rootView, id);
      if (contAllPads == null) {
        break missingId;
      }

      id = R.id.launchpadOverride;
      ImageView launchpadOverride = ViewBindings.findChildViewById(rootView, id);
      if (launchpadOverride == null) {
        break missingId;
      }

      id = R.id.launchpadOverride_scale;
      EditText launchpadOverrideScale = ViewBindings.findChildViewById(rootView, id);
      if (launchpadOverrideScale == null) {
        break missingId;
      }

      id = R.id.layer_cfg_window;
      RelativeLayout layerCfgWindow = ViewBindings.findChildViewById(rootView, id);
      if (layerCfgWindow == null) {
        break missingId;
      }

      id = R.id.layer_decoration_scale_background;
      LinearLayout layerDecorationScaleBackground = ViewBindings.findChildViewById(rootView, id);
      if (layerDecorationScaleBackground == null) {
        break missingId;
      }

      id = R.id.layer_decoration_scale_title;
      TextView layerDecorationScaleTitle = ViewBindings.findChildViewById(rootView, id);
      if (layerDecorationScaleTitle == null) {
        break missingId;
      }

      RelativeLayout layoutbackground = (RelativeLayout) rootView;

      id = R.id.playbgimg;
      ImageView playbgimg = ViewBindings.findChildViewById(rootView, id);
      if (playbgimg == null) {
        break missingId;
      }

      id = R.id.scale_accept;
      Button scaleAccept = ViewBindings.findChildViewById(rootView, id);
      if (scaleAccept == null) {
        break missingId;
      }

      id = R.id.scale_hide;
      Button scaleHide = ViewBindings.findChildViewById(rootView, id);
      if (scaleHide == null) {
        break missingId;
      }

      id = R.id.seekBarProgressAutoplay;
      VerticalSeekBar seekBarProgressAutoplay = ViewBindings.findChildViewById(rootView, id);
      if (seekBarProgressAutoplay == null) {
        break missingId;
      }

      id = R.id.stopAutoplayRec;
      Button stopAutoplayRec = ViewBindings.findChildViewById(rootView, id);
      if (stopAutoplayRec == null) {
        break missingId;
      }

      return new PlaypadsBinding((RelativeLayout) rootView, contAllPads, launchpadOverride,
          launchpadOverrideScale, layerCfgWindow, layerDecorationScaleBackground,
          layerDecorationScaleTitle, layoutbackground, playbgimg, scaleAccept, scaleHide,
          seekBarProgressAutoplay, stopAutoplayRec);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
