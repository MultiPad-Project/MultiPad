// Generated by view binder compiler. Do not edit!
package com.xayup.multipad.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.xayup.multipad.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ExitConfigsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final RelativeLayout alertExitGlowCfgItem;

  @NonNull
  public final RelativeLayout alertExitGlowItem;

  @NonNull
  public final RelativeLayout alertExitHideButtoms;

  @NonNull
  public final LinearLayout alertExitItemLayerCfg;

  @NonNull
  public final RelativeLayout alertExitLayerDecorationItem;

  @NonNull
  public final RelativeLayout alertExitOldColors;

  @NonNull
  public final RelativeLayout alertExitRecAutoplay;

  @NonNull
  public final RelativeLayout alertExitSlideMode;

  @NonNull
  public final RelativeLayout alertExitSpamLedItem;

  @NonNull
  public final RelativeLayout alertExitSpamSoundItem;

  @NonNull
  public final RelativeLayout alertExitUiImgSelectItem;

  @NonNull
  public final LinearLayout exitConfigs;

  @NonNull
  public final CheckBox glowCfgCheck;

  @NonNull
  public final TextView glowCfgSubtitle;

  @NonNull
  public final TextView glowCfgTitle;

  @NonNull
  public final CheckBox glowCheck;

  @NonNull
  public final TextView glowSubtitle;

  @NonNull
  public final TextView glowTitle;

  @NonNull
  public final CheckBox hideButtomsCheck;

  @NonNull
  public final TextView hideButtomsSubtitle;

  @NonNull
  public final TextView hideButtomsTitle;

  @NonNull
  public final TextView itemLayerCfgSubtitle;

  @NonNull
  public final TextView itemLayerCfgTitle;

  @NonNull
  public final CheckBox layerDecorationCheck;

  @NonNull
  public final TextView layerDecorationSubtitle;

  @NonNull
  public final TextView layerDecorationTitle;

  @NonNull
  public final CheckBox ledSpam;

  @NonNull
  public final ScrollView mainFloatingMenuMainlist;

  @NonNull
  public final CheckBox oldColorsCheck;

  @NonNull
  public final TextView oldColorsSubtitle;

  @NonNull
  public final TextView oldColorsTitle;

  @NonNull
  public final CheckBox recAutoplayCheck;

  @NonNull
  public final TextView recAutoplaySubtitle;

  @NonNull
  public final TextView recAutoplayTitle;

  @NonNull
  public final CheckBox slideModeCheck;

  @NonNull
  public final TextView slideModeSubtitle;

  @NonNull
  public final TextView slideModeTitle;

  @NonNull
  public final CheckBox soundSpam;

  @NonNull
  public final TextView spamLedSubtitle;

  @NonNull
  public final TextView spamLedTitle;

  @NonNull
  public final TextView spamSoundSubtitle;

  @NonNull
  public final TextView spamSoundTitle;

  @NonNull
  public final TextView uiImgSelectSubtitle;

  @NonNull
  public final TextView uiImgSelectTitle;

  private ExitConfigsBinding(@NonNull ScrollView rootView,
      @NonNull RelativeLayout alertExitGlowCfgItem, @NonNull RelativeLayout alertExitGlowItem,
      @NonNull RelativeLayout alertExitHideButtoms, @NonNull LinearLayout alertExitItemLayerCfg,
      @NonNull RelativeLayout alertExitLayerDecorationItem,
      @NonNull RelativeLayout alertExitOldColors, @NonNull RelativeLayout alertExitRecAutoplay,
      @NonNull RelativeLayout alertExitSlideMode, @NonNull RelativeLayout alertExitSpamLedItem,
      @NonNull RelativeLayout alertExitSpamSoundItem,
      @NonNull RelativeLayout alertExitUiImgSelectItem, @NonNull LinearLayout exitConfigs,
      @NonNull CheckBox glowCfgCheck, @NonNull TextView glowCfgSubtitle,
      @NonNull TextView glowCfgTitle, @NonNull CheckBox glowCheck, @NonNull TextView glowSubtitle,
      @NonNull TextView glowTitle, @NonNull CheckBox hideButtomsCheck,
      @NonNull TextView hideButtomsSubtitle, @NonNull TextView hideButtomsTitle,
      @NonNull TextView itemLayerCfgSubtitle, @NonNull TextView itemLayerCfgTitle,
      @NonNull CheckBox layerDecorationCheck, @NonNull TextView layerDecorationSubtitle,
      @NonNull TextView layerDecorationTitle, @NonNull CheckBox ledSpam,
      @NonNull ScrollView mainFloatingMenuMainlist, @NonNull CheckBox oldColorsCheck,
      @NonNull TextView oldColorsSubtitle, @NonNull TextView oldColorsTitle,
      @NonNull CheckBox recAutoplayCheck, @NonNull TextView recAutoplaySubtitle,
      @NonNull TextView recAutoplayTitle, @NonNull CheckBox slideModeCheck,
      @NonNull TextView slideModeSubtitle, @NonNull TextView slideModeTitle,
      @NonNull CheckBox soundSpam, @NonNull TextView spamLedSubtitle,
      @NonNull TextView spamLedTitle, @NonNull TextView spamSoundSubtitle,
      @NonNull TextView spamSoundTitle, @NonNull TextView uiImgSelectSubtitle,
      @NonNull TextView uiImgSelectTitle) {
    this.rootView = rootView;
    this.alertExitGlowCfgItem = alertExitGlowCfgItem;
    this.alertExitGlowItem = alertExitGlowItem;
    this.alertExitHideButtoms = alertExitHideButtoms;
    this.alertExitItemLayerCfg = alertExitItemLayerCfg;
    this.alertExitLayerDecorationItem = alertExitLayerDecorationItem;
    this.alertExitOldColors = alertExitOldColors;
    this.alertExitRecAutoplay = alertExitRecAutoplay;
    this.alertExitSlideMode = alertExitSlideMode;
    this.alertExitSpamLedItem = alertExitSpamLedItem;
    this.alertExitSpamSoundItem = alertExitSpamSoundItem;
    this.alertExitUiImgSelectItem = alertExitUiImgSelectItem;
    this.exitConfigs = exitConfigs;
    this.glowCfgCheck = glowCfgCheck;
    this.glowCfgSubtitle = glowCfgSubtitle;
    this.glowCfgTitle = glowCfgTitle;
    this.glowCheck = glowCheck;
    this.glowSubtitle = glowSubtitle;
    this.glowTitle = glowTitle;
    this.hideButtomsCheck = hideButtomsCheck;
    this.hideButtomsSubtitle = hideButtomsSubtitle;
    this.hideButtomsTitle = hideButtomsTitle;
    this.itemLayerCfgSubtitle = itemLayerCfgSubtitle;
    this.itemLayerCfgTitle = itemLayerCfgTitle;
    this.layerDecorationCheck = layerDecorationCheck;
    this.layerDecorationSubtitle = layerDecorationSubtitle;
    this.layerDecorationTitle = layerDecorationTitle;
    this.ledSpam = ledSpam;
    this.mainFloatingMenuMainlist = mainFloatingMenuMainlist;
    this.oldColorsCheck = oldColorsCheck;
    this.oldColorsSubtitle = oldColorsSubtitle;
    this.oldColorsTitle = oldColorsTitle;
    this.recAutoplayCheck = recAutoplayCheck;
    this.recAutoplaySubtitle = recAutoplaySubtitle;
    this.recAutoplayTitle = recAutoplayTitle;
    this.slideModeCheck = slideModeCheck;
    this.slideModeSubtitle = slideModeSubtitle;
    this.slideModeTitle = slideModeTitle;
    this.soundSpam = soundSpam;
    this.spamLedSubtitle = spamLedSubtitle;
    this.spamLedTitle = spamLedTitle;
    this.spamSoundSubtitle = spamSoundSubtitle;
    this.spamSoundTitle = spamSoundTitle;
    this.uiImgSelectSubtitle = uiImgSelectSubtitle;
    this.uiImgSelectTitle = uiImgSelectTitle;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ExitConfigsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ExitConfigsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.exit_configs, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ExitConfigsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.alertExit_glow_cfg_item;
      RelativeLayout alertExitGlowCfgItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitGlowCfgItem == null) {
        break missingId;
      }

      id = R.id.alertExit_glow_item;
      RelativeLayout alertExitGlowItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitGlowItem == null) {
        break missingId;
      }

      id = R.id.alertExit_hide_buttoms;
      RelativeLayout alertExitHideButtoms = ViewBindings.findChildViewById(rootView, id);
      if (alertExitHideButtoms == null) {
        break missingId;
      }

      id = R.id.alertExit_item_layer_cfg;
      LinearLayout alertExitItemLayerCfg = ViewBindings.findChildViewById(rootView, id);
      if (alertExitItemLayerCfg == null) {
        break missingId;
      }

      id = R.id.alertExit_layer_decoration_item;
      RelativeLayout alertExitLayerDecorationItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitLayerDecorationItem == null) {
        break missingId;
      }

      id = R.id.alertExit_old_colors;
      RelativeLayout alertExitOldColors = ViewBindings.findChildViewById(rootView, id);
      if (alertExitOldColors == null) {
        break missingId;
      }

      id = R.id.alertExit_rec_autoplay;
      RelativeLayout alertExitRecAutoplay = ViewBindings.findChildViewById(rootView, id);
      if (alertExitRecAutoplay == null) {
        break missingId;
      }

      id = R.id.alertExit_slide_mode;
      RelativeLayout alertExitSlideMode = ViewBindings.findChildViewById(rootView, id);
      if (alertExitSlideMode == null) {
        break missingId;
      }

      id = R.id.alertExit_spam_led_item;
      RelativeLayout alertExitSpamLedItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitSpamLedItem == null) {
        break missingId;
      }

      id = R.id.alertExit_spam_sound_item;
      RelativeLayout alertExitSpamSoundItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitSpamSoundItem == null) {
        break missingId;
      }

      id = R.id.alertExit_ui_img_select_item;
      RelativeLayout alertExitUiImgSelectItem = ViewBindings.findChildViewById(rootView, id);
      if (alertExitUiImgSelectItem == null) {
        break missingId;
      }

      id = R.id.exit_configs;
      LinearLayout exitConfigs = ViewBindings.findChildViewById(rootView, id);
      if (exitConfigs == null) {
        break missingId;
      }

      id = R.id.glow_cfg_check;
      CheckBox glowCfgCheck = ViewBindings.findChildViewById(rootView, id);
      if (glowCfgCheck == null) {
        break missingId;
      }

      id = R.id.glow_cfg_subtitle;
      TextView glowCfgSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (glowCfgSubtitle == null) {
        break missingId;
      }

      id = R.id.glow_cfg_title;
      TextView glowCfgTitle = ViewBindings.findChildViewById(rootView, id);
      if (glowCfgTitle == null) {
        break missingId;
      }

      id = R.id.glow_check;
      CheckBox glowCheck = ViewBindings.findChildViewById(rootView, id);
      if (glowCheck == null) {
        break missingId;
      }

      id = R.id.glow_subtitle;
      TextView glowSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (glowSubtitle == null) {
        break missingId;
      }

      id = R.id.glow_title;
      TextView glowTitle = ViewBindings.findChildViewById(rootView, id);
      if (glowTitle == null) {
        break missingId;
      }

      id = R.id.hide_buttoms_check;
      CheckBox hideButtomsCheck = ViewBindings.findChildViewById(rootView, id);
      if (hideButtomsCheck == null) {
        break missingId;
      }

      id = R.id.hide_buttoms_subtitle;
      TextView hideButtomsSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (hideButtomsSubtitle == null) {
        break missingId;
      }

      id = R.id.hide_buttoms_title;
      TextView hideButtomsTitle = ViewBindings.findChildViewById(rootView, id);
      if (hideButtomsTitle == null) {
        break missingId;
      }

      id = R.id.item_layer_cfg_subtitle;
      TextView itemLayerCfgSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (itemLayerCfgSubtitle == null) {
        break missingId;
      }

      id = R.id.item_layer_cfg_title;
      TextView itemLayerCfgTitle = ViewBindings.findChildViewById(rootView, id);
      if (itemLayerCfgTitle == null) {
        break missingId;
      }

      id = R.id.layer_decoration_check;
      CheckBox layerDecorationCheck = ViewBindings.findChildViewById(rootView, id);
      if (layerDecorationCheck == null) {
        break missingId;
      }

      id = R.id.layer_decoration_subtitle;
      TextView layerDecorationSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (layerDecorationSubtitle == null) {
        break missingId;
      }

      id = R.id.layer_decoration_title;
      TextView layerDecorationTitle = ViewBindings.findChildViewById(rootView, id);
      if (layerDecorationTitle == null) {
        break missingId;
      }

      id = R.id.ledSpam;
      CheckBox ledSpam = ViewBindings.findChildViewById(rootView, id);
      if (ledSpam == null) {
        break missingId;
      }

      ScrollView mainFloatingMenuMainlist = (ScrollView) rootView;

      id = R.id.old_colors_check;
      CheckBox oldColorsCheck = ViewBindings.findChildViewById(rootView, id);
      if (oldColorsCheck == null) {
        break missingId;
      }

      id = R.id.old_colors_subtitle;
      TextView oldColorsSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (oldColorsSubtitle == null) {
        break missingId;
      }

      id = R.id.old_colors_title;
      TextView oldColorsTitle = ViewBindings.findChildViewById(rootView, id);
      if (oldColorsTitle == null) {
        break missingId;
      }

      id = R.id.rec_autoplay_check;
      CheckBox recAutoplayCheck = ViewBindings.findChildViewById(rootView, id);
      if (recAutoplayCheck == null) {
        break missingId;
      }

      id = R.id.rec_autoplay_subtitle;
      TextView recAutoplaySubtitle = ViewBindings.findChildViewById(rootView, id);
      if (recAutoplaySubtitle == null) {
        break missingId;
      }

      id = R.id.rec_autoplay_title;
      TextView recAutoplayTitle = ViewBindings.findChildViewById(rootView, id);
      if (recAutoplayTitle == null) {
        break missingId;
      }

      id = R.id.slide_mode_check;
      CheckBox slideModeCheck = ViewBindings.findChildViewById(rootView, id);
      if (slideModeCheck == null) {
        break missingId;
      }

      id = R.id.slide_mode_subtitle;
      TextView slideModeSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (slideModeSubtitle == null) {
        break missingId;
      }

      id = R.id.slide_mode_title;
      TextView slideModeTitle = ViewBindings.findChildViewById(rootView, id);
      if (slideModeTitle == null) {
        break missingId;
      }

      id = R.id.soundSpam;
      CheckBox soundSpam = ViewBindings.findChildViewById(rootView, id);
      if (soundSpam == null) {
        break missingId;
      }

      id = R.id.spam_led_subtitle;
      TextView spamLedSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (spamLedSubtitle == null) {
        break missingId;
      }

      id = R.id.spam_led_title;
      TextView spamLedTitle = ViewBindings.findChildViewById(rootView, id);
      if (spamLedTitle == null) {
        break missingId;
      }

      id = R.id.spam_sound_subtitle;
      TextView spamSoundSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (spamSoundSubtitle == null) {
        break missingId;
      }

      id = R.id.spam_sound_title;
      TextView spamSoundTitle = ViewBindings.findChildViewById(rootView, id);
      if (spamSoundTitle == null) {
        break missingId;
      }

      id = R.id.ui_img_select_subtitle;
      TextView uiImgSelectSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (uiImgSelectSubtitle == null) {
        break missingId;
      }

      id = R.id.ui_img_select_title;
      TextView uiImgSelectTitle = ViewBindings.findChildViewById(rootView, id);
      if (uiImgSelectTitle == null) {
        break missingId;
      }

      return new ExitConfigsBinding((ScrollView) rootView, alertExitGlowCfgItem, alertExitGlowItem,
          alertExitHideButtoms, alertExitItemLayerCfg, alertExitLayerDecorationItem,
          alertExitOldColors, alertExitRecAutoplay, alertExitSlideMode, alertExitSpamLedItem,
          alertExitSpamSoundItem, alertExitUiImgSelectItem, exitConfigs, glowCfgCheck,
          glowCfgSubtitle, glowCfgTitle, glowCheck, glowSubtitle, glowTitle, hideButtomsCheck,
          hideButtomsSubtitle, hideButtomsTitle, itemLayerCfgSubtitle, itemLayerCfgTitle,
          layerDecorationCheck, layerDecorationSubtitle, layerDecorationTitle, ledSpam,
          mainFloatingMenuMainlist, oldColorsCheck, oldColorsSubtitle, oldColorsTitle,
          recAutoplayCheck, recAutoplaySubtitle, recAutoplayTitle, slideModeCheck,
          slideModeSubtitle, slideModeTitle, soundSpam, spamLedSubtitle, spamLedTitle,
          spamSoundSubtitle, spamSoundTitle, uiImgSelectSubtitle, uiImgSelectTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
